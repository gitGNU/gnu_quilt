#! @BASH@

#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.
#
#  See the COPYING and AUTHORS files for more details.

# Read in library functions
if [ "$(type -t patch_file_name)" != function ]
then
	if ! [ -r @SCRIPTS@/patchfns ]
	then
		echo "Cannot read library @SCRIPTS@/patchfns" >&2
		exit 1
	fi
	. @SCRIPTS@/patchfns
fi

usage()
{
	echo $"Usage: quilt patches {file}"
	if [ x$1 = x-h ]
	then
		echo $"

Print the list of patches that modify the specified file. (Uses a
heuristic to determine which files are modified by unapplied patches.
Note that this heuristic is much slower than scanning applied patches.)

-n	Print the patch file names instead of the patch names.

-v	Verbose, more user friendly output.

"
		exit 0
	else
		exit 1
	fi
}

scan_applied()
{
	local prefix=$1 file=$2
	shift 2
	local patch

	for patch in "$@"
	do
		if [ -f ".pc/$patch/$file" ]
		then
			[ -n "$opt_filenames" ] && \
				patch=$(patch_file_name $patch)
			echo "$prefix$patch"
		fi
	done
}

scan_unapplied()
{
	local prefix=$1 file=$2
	shift 2
	local file_bre="$(quote_bre $file)" patch

	for patch in "$@"
	do
		if touched_by_patch $(patch_strip_level $patch) $patch \
		   | grep -q "^$file_bre\$"
		then
			[ -n "$opt_filenames" ] && \
				patch=$(patch_file_name $patch)
			echo "$prefix$patch"
		fi
	done
}

options=`getopt -o nvh -- "$@"`

if [ $? -ne 0 ]
then
	usage
fi

eval set -- "$options"

while true
do
	case "$1" in
	-n)
		opt_filenames=1
		shift ;;
	-v)
		opt_verbose=1
		shift ;;
	-h)
		usage -h ;;
	--)
		shift
		break ;;
	esac
done

if [ $# -ne 1 ]
then
	usage
fi
opt_file=$1

top=$(top_patch)

if [ -n "$opt_verbose" ]
then
	applied="+ "
	current="= "
	unapplied="  "
else
	applied=""
	current=""
	unapplied=""
fi

scan_applied "$applied" $opt_file $(patches_before $top)
[ -n "$top" ] && \
	scan_applied "$current" $opt_file $top
scan_unapplied "$unapplied" $opt_file $(patches_after $top)
### Local Variables:
### mode: shell-script
### End:
# vim:filetype=sh
