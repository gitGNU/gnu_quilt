#! @BASH@

#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.
#
#  See the COPYING and AUTHORS files for more details.

# Read in library functions
if [ "$(type -t patch_file_name)" != function ]
then
	if ! [ -r @SCRIPTS@/patchfns ]
	then
		echo "Cannot read library @SCRIPTS@/patchfns" >&2
		exit 1
	fi
	. @SCRIPTS@/patchfns
fi

usage()
{
	echo $"Usage: quilt files [-v] [patch]"
	if [ x$1 = x-h ]
	then
		echo $"

Print the list of files that the topmost or specified patch changes.

-v	Verbose, more user friendly output.

"
		exit 0
	else
		exit 1
	fi
}

options=`getopt -o vh -- "$@"`

if [ $? -ne 0 ]
then
	usage
fi

eval set -- "$options"

while true
do
	case "$1" in
	-v)
		opt_verbose=1
		shift ;;
	-h)
		usage -h ;;
	--)
		shift
		break ;;
	esac
done

if [ $# -gt 1 ]
then
	usage
fi
opt_patch=$1

if [ -n "$opt_patch" ]
then
	patch=$(stripit "$opt_patch")
else
	patch=$(top_patch)
	if [ -z "$patch" ]
	then
		echo $"No patch applied" >&2
		exit 1
	fi
fi

if ! is_applied $patch
then
	if [ -n "$opt_verbose" ]
	then
		echo $"Patch is not applied (no verbose output)" >&2
		opt_verbose=0
	else
		echo $"Patch is not applied" >&2
	fi
fi

for file in $(files_in_patch $patch)
do
	status=" "
	if [ -s $(backup_file_name $patch $file) ]
	then
		if ! [ -s $file ]
		then
			status="-"
		fi
	else
		if [ -s $file ]
		then
			status="+"
		else
			continue
		fi
	fi
	if [ -z "$opt_verbose" ]
	then
		echo "$file"
	else
		echo "$status $file"
	fi
done
### Local Variables:
### mode: shell-script
### End:
# vim:filetype=sh
